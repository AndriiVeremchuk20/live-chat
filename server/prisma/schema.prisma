// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum Gender {
  MALE
  FEMALE
  BINARY
}

model User {
  id          String   @id @unique
  role        Role     @default(USER)
  first_name  String
  last_name   String
  email       String   @unique
  avatar_path String?
  created_at  DateTime @default(now())
  profile     Profile?

  chats UsersOnChats[]

  sender   Message[] @relation("sender")
  receiver Message[] @relation("receiver")

  posts    Post[]    @relation("user_post")
  likes    Like[]    @relation("user_likes")
  comments Comment[] @relation("user_comments")

  subscribers Subscription[] @relation("user_followers")
  subscribedTo Subscription[] @relation("user_following")
}

model Profile {
  id      String @id @default(cuid())
  user    User   @relation(fields: [user_id], references: [id])
  user_id String @unique

  age        Int
  country    String
  gender     Gender
  about_self String
}

model UsersOnChats {
  user    User   @relation(fields: [user_id], references: [id])
  user_id String
  chat    Chat   @relation(fields: [chat_id], references: [id])
  chat_id String

  @@id([user_id, chat_id])
}

model Chat {
  id         String         @id @default(cuid())
  users      UsersOnChats[]
  messages   Message[]
  created_at DateTime       @default(now())
}

model Message {
  id         String   @id @default(cuid())
  text       String?
  image_url  String?
  isRead     Boolean  @default(true)
  created_at DateTime @default(now())

  reply_to_message_id String?
  reply_to            Message?  @relation("replyMessage", fields: [reply_to_message_id], references: [id])
  replied_messages    Message[] @relation("replyMessage")

  chat    Chat   @relation(fields: [chat_id], references: [id])
  chat_id String

  sender    User   @relation("sender", fields: [sender_id], references: [id])
  sender_id String

  receiver    User   @relation("receiver", fields: [receiver_id], references: [id])
  receiver_id String
}

model Post {
  id          String   @id @default(cuid())
  file_path   String
  description String?
  created_at  DateTime @default(now())

  user_id String
  user    User   @relation("user_post", fields: [user_id], references: [id])

  likes    Like[]
  comments Comment[]
}

model Like {
  user    User   @relation("user_likes", fields: [user_id], references: [id])
  user_id String

  post    Post   @relation(fields: [post_id], references: [id])
  post_id String

  created_at DateTime @default(now())

  @@id([user_id, post_id])
}

model Comment {
  id   String @id @default(cuid())
  text String

  user_id String
  user    User   @relation("user_comments", fields: [user_id], references: [id])

  post_id String
  post    Post   @relation(fields: [post_id], references: [id])

  created_at DateTime @default(now())
}

model Subscription {
  subscriber_id  String
  subscribedTo_id String

  subscriber  User @relation("user_followers", fields: [subscriber_id], references: [id])
  subscribedTo User @relation("user_following", fields: [subscribedTo_id], references: [id])

  created_at DateTime @default(now())

  @@id([subscriber_id, subscribedTo_id])
  @@unique([subscriber_id, subscribedTo_id])
}
